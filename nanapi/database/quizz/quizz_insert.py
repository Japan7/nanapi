# Generated by gel-pydantic-codegen
# pyright: strict
from uuid import UUID

from gel import AsyncIOExecutor
from pydantic import BaseModel, TypeAdapter

EDGEQL_QUERY = r"""
with
  channel_id := <str>$channel_id,
  question := <optional str>$question,
  attachment_url := <optional str>$attachment_url,
  answer := <optional str>$answer,
  hints := <optional array<str>>$hints,
  author_discord_id := <str>$author_discord_id,
  author_discord_username := <str>$author_discord_username,
  author := (
    insert user::User {
      discord_id := author_discord_id,
      discord_username := author_discord_username,
    }
    unless conflict on .discord_id
    else (
      update user::User set {
        discord_username := author_discord_username,
      }
    )
  ),
insert quizz::Quizz {
  client := global client,
  channel_id := channel_id,
  question := question,
  attachment_url := attachment_url,
  answer := answer,
  hints := hints,
  author := author,
}
"""


class QuizzInsertResult(BaseModel):
    id: UUID


adapter = TypeAdapter[QuizzInsertResult](QuizzInsertResult)


async def quizz_insert(
    executor: AsyncIOExecutor,
    *,
    channel_id: str,
    author_discord_id: str,
    author_discord_username: str,
    question: str | None = None,
    attachment_url: str | None = None,
    answer: str | None = None,
    hints: list[str] | None = None,
) -> QuizzInsertResult:
    resp = await executor.query_single_json(  # pyright: ignore[reportUnknownMemberType]
        EDGEQL_QUERY,
        channel_id=channel_id,
        author_discord_id=author_discord_id,
        author_discord_username=author_discord_username,
        question=question,
        attachment_url=attachment_url,
        answer=answer,
        hints=hints,
    )
    return adapter.validate_json(resp, strict=False)
