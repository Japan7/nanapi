# Generated by gel-pydantic-codegen
# pyright: strict
from typing import Any
from uuid import UUID

from gel import AsyncIOExecutor
from pydantic import BaseModel, TypeAdapter

EDGEQL_QUERY = r"""
insert ai::Prompt {
  client := global client,
  name := <str>$name,
  description := <optional str>$description,
  prompt := <str>$prompt,
  arguments := (
    for arg in array_unpack(<array<json>>$arguments) union (
      insert ai::PromptArgument {
        client := global client,
        name := <str>json_get(arg, 'name'),
        description := <optional str>json_get(arg, 'description'),
      }
    )
  )
}
"""


class PromptInsertResult(BaseModel):
    id: UUID


adapter = TypeAdapter[PromptInsertResult](PromptInsertResult)


async def prompt_insert(
    executor: AsyncIOExecutor,
    *,
    name: str,
    prompt: str,
    arguments: list[Any],
    description: str | None = None,
) -> PromptInsertResult:
    resp = await executor.query_single_json(  # pyright: ignore[reportUnknownMemberType]
        EDGEQL_QUERY,
        name=name,
        prompt=prompt,
        arguments=arguments,
        description=description,
    )
    return adapter.validate_json(resp, strict=False)
