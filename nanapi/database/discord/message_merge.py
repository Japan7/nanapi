# Generated by gel-pydantic-codegen
# pyright: strict
from typing import Any
from uuid import UUID

import orjson
from gel import AsyncIOExecutor
from pydantic import BaseModel, TypeAdapter

EDGEQL_QUERY = r"""
with
  message_id := <str>$message_id,
  data := <json>$data,
  noindex := <optional str>$noindex,
insert discord::Message {
  client := global client,
  data := data,
  guild_id := <str>json_get(data, 'guild_id'),
  channel_id := <str>json_get(data, 'channel_id'),
  message_id := message_id,
  author_id := <str>json_get(data, 'author', 'id'),
  content := <str>json_get(data, 'content'),
  timestamp := <datetime>json_get(data, 'timestamp'),
  edited_timestamp := <datetime>json_get(data, 'edited_timestamp'),
  noindex := noindex,
}
unless conflict on ((.client, .message_id))
else (
  update discord::Message set {
    data := data,
    guild_id := <str>json_get(data, 'guild_id'),
    channel_id := <str>json_get(data, 'channel_id'),
    author_id := <str>json_get(data, 'author', 'id'),
    content := <str>json_get(data, 'content'),
    timestamp := <datetime>json_get(data, 'timestamp'),
    edited_timestamp := <datetime>json_get(data, 'edited_timestamp'),
    noindex := (noindex if noindex != '' else {}) if exists noindex else .noindex,
  }
)
"""


class MessageMergeResult(BaseModel):
    id: UUID


adapter = TypeAdapter[MessageMergeResult | None](MessageMergeResult | None)


async def message_merge(
    executor: AsyncIOExecutor,
    *,
    message_id: str,
    data: Any,
    noindex: str | None = None,
) -> MessageMergeResult | None:
    resp = await executor.query_single_json(  # pyright: ignore[reportUnknownMemberType]
        EDGEQL_QUERY,
        message_id=message_id,
        data=orjson.dumps(data).decode(),
        noindex=noindex,
    )
    return adapter.validate_json(resp, strict=False)
