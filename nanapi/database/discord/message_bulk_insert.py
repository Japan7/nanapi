# Generated by gel-pydantic-codegen
# pyright: strict
from typing import Any
from uuid import UUID

from gel import AsyncIOExecutor
from pydantic import BaseModel, TypeAdapter

EDGEQL_QUERY = r"""
with
  messages := <array <json>>$messages,
for data in array_unpack(messages) union (
  insert discord::Message {
    client := global client,
    data := data,
    guild_id := <str>json_get(data, 'guild_id'),
    channel_id := <str>json_get(data, 'channel_id'),
    message_id := <str>json_get(data, 'id'),
    author_id := <str>json_get(data, 'author', 'id'),
    content := <str>json_get(data, 'content'),
    timestamp := <datetime>json_get(data, 'timestamp'),
    edited_timestamp := <datetime>json_get(data, 'edited_timestamp'),

  }
  unless conflict on ((.client, .message_id))
)
"""


class MessageBulkInsertResult(BaseModel):
    id: UUID


adapter = TypeAdapter[list[MessageBulkInsertResult]](list[MessageBulkInsertResult])


async def message_bulk_insert(
    executor: AsyncIOExecutor,
    *,
    messages: list[Any],
) -> list[MessageBulkInsertResult]:
    resp = await executor.query_json(  # pyright: ignore[reportUnknownMemberType]
        EDGEQL_QUERY,
        messages=messages,
    )
    return adapter.validate_json(resp, strict=False)
