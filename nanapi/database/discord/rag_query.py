# Generated by gel-pydantic-codegen
# pyright: strict
from typing import Any, NamedTuple

from gel import AsyncIOExecutor
from pydantic import BaseModel, TypeAdapter

EDGEQL_QUERY = r"""
with
  embeddings := <array<float32>>$embeddings
select ext::ai::search(discord::MessagePage { messages: { data } }, embeddings)
"""


class RagQueryResultObjectMessages(BaseModel):
    data: Any


class RagQueryResultObject(BaseModel):
    messages: list[RagQueryResultObjectMessages]


class RagQueryResult(NamedTuple):
    object: RagQueryResultObject
    distance: float


adapter = TypeAdapter[list[RagQueryResult]](list[RagQueryResult])


async def rag_query(
    executor: AsyncIOExecutor,
    *,
    embeddings: list[float],
) -> list[RagQueryResult]:
    resp = await executor.query_json(  # pyright: ignore[reportUnknownMemberType]
        EDGEQL_QUERY,
        embeddings=embeddings,
    )
    return adapter.validate_json(resp, strict=False)
