# Generated by gel-pydantic-codegen
# pyright: strict
from datetime import datetime
from typing import Any
from uuid import UUID

from gel import AsyncIOExecutor
from pydantic import BaseModel, TypeAdapter

EDGEQL_QUERY = r"""
select discord::MessagePage {
  id,
  messages: { data, deleted_at }
}
filter .client = global client
and any(.messages.edited_timestamp > .updated_at or .messages.deleted_at > .updated_at)
"""


class PageSelectFilterUpdatedMessagesResultMessages(BaseModel):
    data: Any
    deleted_at: datetime | None


class PageSelectFilterUpdatedMessagesResult(BaseModel):
    id: UUID
    messages: list[PageSelectFilterUpdatedMessagesResultMessages]


adapter = TypeAdapter[list[PageSelectFilterUpdatedMessagesResult]](
    list[PageSelectFilterUpdatedMessagesResult]
)


async def page_select_filter_updated_messages(
    executor: AsyncIOExecutor,
) -> list[PageSelectFilterUpdatedMessagesResult]:
    resp = await executor.query_json(  # pyright: ignore[reportUnknownMemberType]
        EDGEQL_QUERY,
    )
    return adapter.validate_json(resp, strict=False)
